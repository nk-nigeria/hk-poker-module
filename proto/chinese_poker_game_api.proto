// Copyright 2020 The Nakama Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

// The realtime protocol for the template match engine.
package api;

option go_package = "github.com/ciaolink-game-platform/cgp-bing-module/api";

enum CardStatus {
    STATUS_HOLD = 0;
    STATUS_UNHOLD = 1;
}

enum CardSuit {
    SUIT_UNSPECIFIED = 0;
    SUIT_CLUBS = 1;
    SUIT_DIAMONDS = 2;
    SUIT_HEARTS = 3;
    SUIT_SPADES = 4;
}

enum CardRank {
    RANK_UNSPECIFIED = 0;
    RANK_A = 1;
    RANK_2 = 2;
    RANK_3 = 3;
    RANK_4 = 4;
    RANK_5 = 5;
    RANK_6 = 6;
    RANK_7 = 7;
    RANK_8 = 8;
    RANK_9 = 9;
    RANK_10 = 10;
    RANK_J = 11;
    RANK_Q = 12;
    RANK_K = 13;
}

// The card
message Card {
    CardRank rank = 1;
    CardSuit suit = 2;
    CardStatus status = 3;
}

message ListCard {
    repeated Card cards = 1;
}

enum ChoiceCode {
    // No choice specified. Unused.
    CHOICE_UNSPECIFIED = 0;
    CHOICE_STAND = 1;
    CHOICE_HIT = 2;
}

// The complete set of opcodes used for communication between clients and server.
enum OpCodeRequest {
    // No opcode specified. Unused.
    OPCODE_UNSPECIFIED = 0;
    // New game round starting.
    OPCODE_REQUEST_NEW_GAME = 1; //message NewGame
    // Request leave game
    OPCODE_REQUEST_LEAVE_GAME = 3;
    
    OPCODE_REQUEST_COMBINE_CARDS = 4;

    OPCODE_REQUEST_SHOW_CARDS = 5; //message Organize
    
    OPCODE_REQUEST_DECLARE_CARDS = 6; //message Organize
}

// The complete set of opcodes used for communication between clients and server.
enum OpCodeUpdate {
    OPCODE_UPDATE_UNSPECIFIED = 0;
    OPCODE_UPDATE_PRESENCE = 1; //message UpdatePresence
    OPCODE_UPDATE_DEAL = 2; //message UpdateDeal
    OPCODE_UPDATE_ORGANIZE_ACK = 3; //TODO: remove
    OPCODE_UPDATE_FINISH = 4; //message UpdateFinish
    // Request was rejected.
    OPCODE_UPDATE_REJECTED = 5;
    // Update game state
    OPCODE_UPDATE_GAME_STATE = 6;
    // update card state/combibne, show, delare
    OPCODE_UPDATE_CARD_STATE = 7;
}

enum GameState {
    GameStateWait = 0;
    GameStatePreparing = 1;
    GameStatePlay = 3;
    GameStateReward = 4;
    GameStateFinish = 5;
}

// Message data sent by client to server representing the cards was organize.
message NewGame {
}

// Message data sent by client to server representing the cards was organize.
message Organize {
    // The current state of the cards.
    ListCard cards = 1;
}

// Message data sent by server to clients representing the joining or leaving of presence
message UpdatePresence {
    repeated string presences = 1;
    string join_presence = 2;
    string leave_presence = 3;
}

message PresenceCards {
    string presence = 1;
    repeated Card cards = 2;
}

// Complete game round with winner announcement.
message UpdateDeal {
    PresenceCards presence_card = 1;
}

message PairResult {
    string presence1 = 1;
    string presence2 = 2;

    int32  first = 3;
    int32  second = 4;
    int32  third = 5;

    int32  special1 = 6;
    int32  special2 = 7;
}

// Complete game round with winner announcement.
message UpdateResult {
    // The final state of the board.
    map<string, PresenceCards> presence_organizes = 1;

    repeated PairResult results = 2;
}

message UpdateGameState {
    GameState state = 1;
    int64 count_down = 2;
    ArrangeCard arrange_card = 3;
    repeated PresenceCards presenceCards = 4;
}

message ArrangeCard {
    string Presence = 1;
    CardEvent card_event = 2;
}

enum HandRanking {
    StraightFlush = 0;
    FourOfAKind = 1;
    FullHouse = 2;
    Flush = 3;
    Straight = 4;
    ThreeOfAKind = 5;
    TwoPairs = 6;
    Pair = 7;
    HighCard = 8;
}

enum CardEvent {
    COMBINE = 0;
    SHOW = 1;
    DECLARE = 2;
}

message UpdateFinish {
    repeated ComparisonResult results = 1;
}

message ComparisonResult {
    string user_id = 1;

    int64 FrontFactor = 2;
    int64 MiddleFactor = 3;
    int64 BackFactor = 4;

    int64 FrontBonus = 5;
    int64 MiddleBonus = 6;
    int64 BackBonus = 7;
}