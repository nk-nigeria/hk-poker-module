// Copyright 2020 The Nakama Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: chinese_poker_game_api.proto

// The realtime protocol for the template match engine.

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CardStatus int32

const (
	CardStatus_STATUS_HOLD   CardStatus = 0
	CardStatus_STATUS_UNHOLD CardStatus = 1
)

// Enum value maps for CardStatus.
var (
	CardStatus_name = map[int32]string{
		0: "STATUS_HOLD",
		1: "STATUS_UNHOLD",
	}
	CardStatus_value = map[string]int32{
		"STATUS_HOLD":   0,
		"STATUS_UNHOLD": 1,
	}
)

func (x CardStatus) Enum() *CardStatus {
	p := new(CardStatus)
	*p = x
	return p
}

func (x CardStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_chinese_poker_game_api_proto_enumTypes[0].Descriptor()
}

func (CardStatus) Type() protoreflect.EnumType {
	return &file_chinese_poker_game_api_proto_enumTypes[0]
}

func (x CardStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardStatus.Descriptor instead.
func (CardStatus) EnumDescriptor() ([]byte, []int) {
	return file_chinese_poker_game_api_proto_rawDescGZIP(), []int{0}
}

type CardSuit int32

const (
	CardSuit_SUIT_UNSPECIFIED CardSuit = 0
	CardSuit_SUIT_CLUBS       CardSuit = 1
	CardSuit_SUIT_DIAMONDS    CardSuit = 2
	CardSuit_SUIT_HEARTS      CardSuit = 3
	CardSuit_SUIT_SPADES      CardSuit = 4
)

// Enum value maps for CardSuit.
var (
	CardSuit_name = map[int32]string{
		0: "SUIT_UNSPECIFIED",
		1: "SUIT_CLUBS",
		2: "SUIT_DIAMONDS",
		3: "SUIT_HEARTS",
		4: "SUIT_SPADES",
	}
	CardSuit_value = map[string]int32{
		"SUIT_UNSPECIFIED": 0,
		"SUIT_CLUBS":       1,
		"SUIT_DIAMONDS":    2,
		"SUIT_HEARTS":      3,
		"SUIT_SPADES":      4,
	}
)

func (x CardSuit) Enum() *CardSuit {
	p := new(CardSuit)
	*p = x
	return p
}

func (x CardSuit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardSuit) Descriptor() protoreflect.EnumDescriptor {
	return file_chinese_poker_game_api_proto_enumTypes[1].Descriptor()
}

func (CardSuit) Type() protoreflect.EnumType {
	return &file_chinese_poker_game_api_proto_enumTypes[1]
}

func (x CardSuit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardSuit.Descriptor instead.
func (CardSuit) EnumDescriptor() ([]byte, []int) {
	return file_chinese_poker_game_api_proto_rawDescGZIP(), []int{1}
}

type CardRank int32

const (
	CardRank_RANK_UNSPECIFIED CardRank = 0
	CardRank_RANK_A           CardRank = 1
	CardRank_RANK_2           CardRank = 2
	CardRank_RANK_3           CardRank = 3
	CardRank_RANK_4           CardRank = 4
	CardRank_RANK_5           CardRank = 5
	CardRank_RANK_6           CardRank = 6
	CardRank_RANK_7           CardRank = 7
	CardRank_RANK_8           CardRank = 8
	CardRank_RANK_9           CardRank = 9
	CardRank_RANK_10          CardRank = 10
	CardRank_RANK_J           CardRank = 11
	CardRank_RANK_Q           CardRank = 12
	CardRank_RANK_K           CardRank = 13
)

// Enum value maps for CardRank.
var (
	CardRank_name = map[int32]string{
		0:  "RANK_UNSPECIFIED",
		1:  "RANK_A",
		2:  "RANK_2",
		3:  "RANK_3",
		4:  "RANK_4",
		5:  "RANK_5",
		6:  "RANK_6",
		7:  "RANK_7",
		8:  "RANK_8",
		9:  "RANK_9",
		10: "RANK_10",
		11: "RANK_J",
		12: "RANK_Q",
		13: "RANK_K",
	}
	CardRank_value = map[string]int32{
		"RANK_UNSPECIFIED": 0,
		"RANK_A":           1,
		"RANK_2":           2,
		"RANK_3":           3,
		"RANK_4":           4,
		"RANK_5":           5,
		"RANK_6":           6,
		"RANK_7":           7,
		"RANK_8":           8,
		"RANK_9":           9,
		"RANK_10":          10,
		"RANK_J":           11,
		"RANK_Q":           12,
		"RANK_K":           13,
	}
)

func (x CardRank) Enum() *CardRank {
	p := new(CardRank)
	*p = x
	return p
}

func (x CardRank) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardRank) Descriptor() protoreflect.EnumDescriptor {
	return file_chinese_poker_game_api_proto_enumTypes[2].Descriptor()
}

func (CardRank) Type() protoreflect.EnumType {
	return &file_chinese_poker_game_api_proto_enumTypes[2]
}

func (x CardRank) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardRank.Descriptor instead.
func (CardRank) EnumDescriptor() ([]byte, []int) {
	return file_chinese_poker_game_api_proto_rawDescGZIP(), []int{2}
}

type ChoiceCode int32

const (
	// No choice specified. Unused.
	ChoiceCode_CHOICE_UNSPECIFIED ChoiceCode = 0
	ChoiceCode_CHOICE_STAND       ChoiceCode = 1
	ChoiceCode_CHOICE_HIT         ChoiceCode = 2
)

// Enum value maps for ChoiceCode.
var (
	ChoiceCode_name = map[int32]string{
		0: "CHOICE_UNSPECIFIED",
		1: "CHOICE_STAND",
		2: "CHOICE_HIT",
	}
	ChoiceCode_value = map[string]int32{
		"CHOICE_UNSPECIFIED": 0,
		"CHOICE_STAND":       1,
		"CHOICE_HIT":         2,
	}
)

func (x ChoiceCode) Enum() *ChoiceCode {
	p := new(ChoiceCode)
	*p = x
	return p
}

func (x ChoiceCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChoiceCode) Descriptor() protoreflect.EnumDescriptor {
	return file_chinese_poker_game_api_proto_enumTypes[3].Descriptor()
}

func (ChoiceCode) Type() protoreflect.EnumType {
	return &file_chinese_poker_game_api_proto_enumTypes[3]
}

func (x ChoiceCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChoiceCode.Descriptor instead.
func (ChoiceCode) EnumDescriptor() ([]byte, []int) {
	return file_chinese_poker_game_api_proto_rawDescGZIP(), []int{3}
}

// The complete set of opcodes used for communication between clients and server.
type OpCodeRequest int32

const (
	// No opcode specified. Unused.
	OpCodeRequest_OPCODE_UNSPECIFIED OpCodeRequest = 0
	// New game round starting.
	OpCodeRequest_OPCODE_REQUEST_NEW_GAME OpCodeRequest = 1 //message NewGame
	// Request leave game
	OpCodeRequest_OPCODE_REQUEST_LEAVE_GAME    OpCodeRequest = 3
	OpCodeRequest_OPCODE_REQUEST_COMBINE_CARDS OpCodeRequest = 4
	OpCodeRequest_OPCODE_REQUEST_SHOW_CARDS    OpCodeRequest = 5 //message Organize
	OpCodeRequest_OPCODE_REQUEST_DECLARE_CARDS OpCodeRequest = 6 //message Organize
)

// Enum value maps for OpCodeRequest.
var (
	OpCodeRequest_name = map[int32]string{
		0: "OPCODE_UNSPECIFIED",
		1: "OPCODE_REQUEST_NEW_GAME",
		3: "OPCODE_REQUEST_LEAVE_GAME",
		4: "OPCODE_REQUEST_COMBINE_CARDS",
		5: "OPCODE_REQUEST_SHOW_CARDS",
		6: "OPCODE_REQUEST_DECLARE_CARDS",
	}
	OpCodeRequest_value = map[string]int32{
		"OPCODE_UNSPECIFIED":           0,
		"OPCODE_REQUEST_NEW_GAME":      1,
		"OPCODE_REQUEST_LEAVE_GAME":    3,
		"OPCODE_REQUEST_COMBINE_CARDS": 4,
		"OPCODE_REQUEST_SHOW_CARDS":    5,
		"OPCODE_REQUEST_DECLARE_CARDS": 6,
	}
)

func (x OpCodeRequest) Enum() *OpCodeRequest {
	p := new(OpCodeRequest)
	*p = x
	return p
}

func (x OpCodeRequest) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpCodeRequest) Descriptor() protoreflect.EnumDescriptor {
	return file_chinese_poker_game_api_proto_enumTypes[4].Descriptor()
}

func (OpCodeRequest) Type() protoreflect.EnumType {
	return &file_chinese_poker_game_api_proto_enumTypes[4]
}

func (x OpCodeRequest) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpCodeRequest.Descriptor instead.
func (OpCodeRequest) EnumDescriptor() ([]byte, []int) {
	return file_chinese_poker_game_api_proto_rawDescGZIP(), []int{4}
}

// The complete set of opcodes used for communication between clients and server.
type OpCodeUpdate int32

const (
	OpCodeUpdate_OPCODE_UPDATE_UNSPECIFIED OpCodeUpdate = 0
	OpCodeUpdate_OPCODE_UPDATE_PRESENCE    OpCodeUpdate = 1 //message UpdatePresence
	OpCodeUpdate_OPCODE_UPDATE_DEAL        OpCodeUpdate = 2 //message UpdateDeal
	OpCodeUpdate_OPCODE_UPDATE_FINISH      OpCodeUpdate = 3 //message UpdateFinish
	// Request was rejected.
	OpCodeUpdate_OPCODE_UPDATE_REJECTED OpCodeUpdate = 4
	// Update game state
	OpCodeUpdate_OPCODE_UPDATE_GAME_STATE OpCodeUpdate = 5
	// update card state/combine, show, declare
	OpCodeUpdate_OPCODE_UPDATE_CARD_STATE OpCodeUpdate = 6
)

// Enum value maps for OpCodeUpdate.
var (
	OpCodeUpdate_name = map[int32]string{
		0: "OPCODE_UPDATE_UNSPECIFIED",
		1: "OPCODE_UPDATE_PRESENCE",
		2: "OPCODE_UPDATE_DEAL",
		3: "OPCODE_UPDATE_FINISH",
		4: "OPCODE_UPDATE_REJECTED",
		5: "OPCODE_UPDATE_GAME_STATE",
		6: "OPCODE_UPDATE_CARD_STATE",
	}
	OpCodeUpdate_value = map[string]int32{
		"OPCODE_UPDATE_UNSPECIFIED": 0,
		"OPCODE_UPDATE_PRESENCE":    1,
		"OPCODE_UPDATE_DEAL":        2,
		"OPCODE_UPDATE_FINISH":      3,
		"OPCODE_UPDATE_REJECTED":    4,
		"OPCODE_UPDATE_GAME_STATE":  5,
		"OPCODE_UPDATE_CARD_STATE":  6,
	}
)

func (x OpCodeUpdate) Enum() *OpCodeUpdate {
	p := new(OpCodeUpdate)
	*p = x
	return p
}

func (x OpCodeUpdate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpCodeUpdate) Descriptor() protoreflect.EnumDescriptor {
	return file_chinese_poker_game_api_proto_enumTypes[5].Descriptor()
}

func (OpCodeUpdate) Type() protoreflect.EnumType {
	return &file_chinese_poker_game_api_proto_enumTypes[5]
}

func (x OpCodeUpdate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpCodeUpdate.Descriptor instead.
func (OpCodeUpdate) EnumDescriptor() ([]byte, []int) {
	return file_chinese_poker_game_api_proto_rawDescGZIP(), []int{5}
}

type GameState int32

const (
	GameState_GameStateUnknown   GameState = 0
	GameState_GameStateIdle      GameState = 1
	GameState_GameStateMatching  GameState = 2
	GameState_GameStatePreparing GameState = 3
	GameState_GameStatePlay      GameState = 4
	GameState_GameStateReward    GameState = 5
	GameState_GameStateFinish    GameState = 6
)

// Enum value maps for GameState.
var (
	GameState_name = map[int32]string{
		0: "GameStateUnknown",
		1: "GameStateIdle",
		2: "GameStateMatching",
		3: "GameStatePreparing",
		4: "GameStatePlay",
		5: "GameStateReward",
		6: "GameStateFinish",
	}
	GameState_value = map[string]int32{
		"GameStateUnknown":   0,
		"GameStateIdle":      1,
		"GameStateMatching":  2,
		"GameStatePreparing": 3,
		"GameStatePlay":      4,
		"GameStateReward":    5,
		"GameStateFinish":    6,
	}
)

func (x GameState) Enum() *GameState {
	p := new(GameState)
	*p = x
	return p
}

func (x GameState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameState) Descriptor() protoreflect.EnumDescriptor {
	return file_chinese_poker_game_api_proto_enumTypes[6].Descriptor()
}

func (GameState) Type() protoreflect.EnumType {
	return &file_chinese_poker_game_api_proto_enumTypes[6]
}

func (x GameState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameState.Descriptor instead.
func (GameState) EnumDescriptor() ([]byte, []int) {
	return file_chinese_poker_game_api_proto_rawDescGZIP(), []int{6}
}

type HandRanking int32

const (
	HandRanking_StraightFlush HandRanking = 0
	HandRanking_FourOfAKind   HandRanking = 1
	HandRanking_FullHouse     HandRanking = 2
	HandRanking_Flush         HandRanking = 3
	HandRanking_Straight      HandRanking = 4
	HandRanking_ThreeOfAKind  HandRanking = 5
	HandRanking_TwoPairs      HandRanking = 6
	HandRanking_Pair          HandRanking = 7
	HandRanking_HighCard      HandRanking = 8
)

// Enum value maps for HandRanking.
var (
	HandRanking_name = map[int32]string{
		0: "StraightFlush",
		1: "FourOfAKind",
		2: "FullHouse",
		3: "Flush",
		4: "Straight",
		5: "ThreeOfAKind",
		6: "TwoPairs",
		7: "Pair",
		8: "HighCard",
	}
	HandRanking_value = map[string]int32{
		"StraightFlush": 0,
		"FourOfAKind":   1,
		"FullHouse":     2,
		"Flush":         3,
		"Straight":      4,
		"ThreeOfAKind":  5,
		"TwoPairs":      6,
		"Pair":          7,
		"HighCard":      8,
	}
)

func (x HandRanking) Enum() *HandRanking {
	p := new(HandRanking)
	*p = x
	return p
}

func (x HandRanking) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HandRanking) Descriptor() protoreflect.EnumDescriptor {
	return file_chinese_poker_game_api_proto_enumTypes[7].Descriptor()
}

func (HandRanking) Type() protoreflect.EnumType {
	return &file_chinese_poker_game_api_proto_enumTypes[7]
}

func (x HandRanking) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HandRanking.Descriptor instead.
func (HandRanking) EnumDescriptor() ([]byte, []int) {
	return file_chinese_poker_game_api_proto_rawDescGZIP(), []int{7}
}

type CardEvent int32

const (
	CardEvent_COMBINE CardEvent = 0
	CardEvent_SHOW    CardEvent = 1
	CardEvent_DECLARE CardEvent = 2
)

// Enum value maps for CardEvent.
var (
	CardEvent_name = map[int32]string{
		0: "COMBINE",
		1: "SHOW",
		2: "DECLARE",
	}
	CardEvent_value = map[string]int32{
		"COMBINE": 0,
		"SHOW":    1,
		"DECLARE": 2,
	}
)

func (x CardEvent) Enum() *CardEvent {
	p := new(CardEvent)
	*p = x
	return p
}

func (x CardEvent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardEvent) Descriptor() protoreflect.EnumDescriptor {
	return file_chinese_poker_game_api_proto_enumTypes[8].Descriptor()
}

func (CardEvent) Type() protoreflect.EnumType {
	return &file_chinese_poker_game_api_proto_enumTypes[8]
}

func (x CardEvent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardEvent.Descriptor instead.
func (CardEvent) EnumDescriptor() ([]byte, []int) {
	return file_chinese_poker_game_api_proto_rawDescGZIP(), []int{8}
}

// The card
type Card struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank   CardRank   `protobuf:"varint,1,opt,name=rank,proto3,enum=api.CardRank" json:"rank,omitempty"`
	Suit   CardSuit   `protobuf:"varint,2,opt,name=suit,proto3,enum=api.CardSuit" json:"suit,omitempty"`
	Status CardStatus `protobuf:"varint,3,opt,name=status,proto3,enum=api.CardStatus" json:"status,omitempty"`
}

func (x *Card) Reset() {
	*x = Card{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chinese_poker_game_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Card) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Card) ProtoMessage() {}

func (x *Card) ProtoReflect() protoreflect.Message {
	mi := &file_chinese_poker_game_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Card.ProtoReflect.Descriptor instead.
func (*Card) Descriptor() ([]byte, []int) {
	return file_chinese_poker_game_api_proto_rawDescGZIP(), []int{0}
}

func (x *Card) GetRank() CardRank {
	if x != nil {
		return x.Rank
	}
	return CardRank_RANK_UNSPECIFIED
}

func (x *Card) GetSuit() CardSuit {
	if x != nil {
		return x.Suit
	}
	return CardSuit_SUIT_UNSPECIFIED
}

func (x *Card) GetStatus() CardStatus {
	if x != nil {
		return x.Status
	}
	return CardStatus_STATUS_HOLD
}

type ListCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cards []*Card `protobuf:"bytes,1,rep,name=cards,proto3" json:"cards,omitempty"`
}

func (x *ListCard) Reset() {
	*x = ListCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chinese_poker_game_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCard) ProtoMessage() {}

func (x *ListCard) ProtoReflect() protoreflect.Message {
	mi := &file_chinese_poker_game_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCard.ProtoReflect.Descriptor instead.
func (*ListCard) Descriptor() ([]byte, []int) {
	return file_chinese_poker_game_api_proto_rawDescGZIP(), []int{1}
}

func (x *ListCard) GetCards() []*Card {
	if x != nil {
		return x.Cards
	}
	return nil
}

// Message data sent by client to server representing the cards was organize.
type NewGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NewGame) Reset() {
	*x = NewGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chinese_poker_game_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewGame) ProtoMessage() {}

func (x *NewGame) ProtoReflect() protoreflect.Message {
	mi := &file_chinese_poker_game_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewGame.ProtoReflect.Descriptor instead.
func (*NewGame) Descriptor() ([]byte, []int) {
	return file_chinese_poker_game_api_proto_rawDescGZIP(), []int{2}
}

// Message data sent by client to server representing the cards was organize.
type Organize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The current state of the cards.
	Cards *ListCard `protobuf:"bytes,1,opt,name=cards,proto3" json:"cards,omitempty"`
}

func (x *Organize) Reset() {
	*x = Organize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chinese_poker_game_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organize) ProtoMessage() {}

func (x *Organize) ProtoReflect() protoreflect.Message {
	mi := &file_chinese_poker_game_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organize.ProtoReflect.Descriptor instead.
func (*Organize) Descriptor() ([]byte, []int) {
	return file_chinese_poker_game_api_proto_rawDescGZIP(), []int{3}
}

func (x *Organize) GetCards() *ListCard {
	if x != nil {
		return x.Cards
	}
	return nil
}

// Message data sent by server to clients representing the joining or leaving of presence
type UpdatePresence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Presences     []string `protobuf:"bytes,1,rep,name=presences,proto3" json:"presences,omitempty"`
	JoinPresence  string   `protobuf:"bytes,2,opt,name=join_presence,json=joinPresence,proto3" json:"join_presence,omitempty"`
	LeavePresence string   `protobuf:"bytes,3,opt,name=leave_presence,json=leavePresence,proto3" json:"leave_presence,omitempty"`
}

func (x *UpdatePresence) Reset() {
	*x = UpdatePresence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chinese_poker_game_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePresence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePresence) ProtoMessage() {}

func (x *UpdatePresence) ProtoReflect() protoreflect.Message {
	mi := &file_chinese_poker_game_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePresence.ProtoReflect.Descriptor instead.
func (*UpdatePresence) Descriptor() ([]byte, []int) {
	return file_chinese_poker_game_api_proto_rawDescGZIP(), []int{4}
}

func (x *UpdatePresence) GetPresences() []string {
	if x != nil {
		return x.Presences
	}
	return nil
}

func (x *UpdatePresence) GetJoinPresence() string {
	if x != nil {
		return x.JoinPresence
	}
	return ""
}

func (x *UpdatePresence) GetLeavePresence() string {
	if x != nil {
		return x.LeavePresence
	}
	return ""
}

type PresenceCards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Presence string  `protobuf:"bytes,1,opt,name=presence,proto3" json:"presence,omitempty"`
	Cards    []*Card `protobuf:"bytes,2,rep,name=cards,proto3" json:"cards,omitempty"`
}

func (x *PresenceCards) Reset() {
	*x = PresenceCards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chinese_poker_game_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PresenceCards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PresenceCards) ProtoMessage() {}

func (x *PresenceCards) ProtoReflect() protoreflect.Message {
	mi := &file_chinese_poker_game_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PresenceCards.ProtoReflect.Descriptor instead.
func (*PresenceCards) Descriptor() ([]byte, []int) {
	return file_chinese_poker_game_api_proto_rawDescGZIP(), []int{5}
}

func (x *PresenceCards) GetPresence() string {
	if x != nil {
		return x.Presence
	}
	return ""
}

func (x *PresenceCards) GetCards() []*Card {
	if x != nil {
		return x.Cards
	}
	return nil
}

// Complete game round with winner announcement.
type UpdateDeal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PresenceCard *PresenceCards `protobuf:"bytes,1,opt,name=presence_card,json=presenceCard,proto3" json:"presence_card,omitempty"`
}

func (x *UpdateDeal) Reset() {
	*x = UpdateDeal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chinese_poker_game_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeal) ProtoMessage() {}

func (x *UpdateDeal) ProtoReflect() protoreflect.Message {
	mi := &file_chinese_poker_game_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeal.ProtoReflect.Descriptor instead.
func (*UpdateDeal) Descriptor() ([]byte, []int) {
	return file_chinese_poker_game_api_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateDeal) GetPresenceCard() *PresenceCards {
	if x != nil {
		return x.PresenceCard
	}
	return nil
}

type UpdateGameState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State         GameState        `protobuf:"varint,1,opt,name=state,proto3,enum=api.GameState" json:"state,omitempty"`
	CountDown     int64            `protobuf:"varint,2,opt,name=count_down,json=countDown,proto3" json:"count_down,omitempty"`
	ArrangeCard   *ArrangeCard     `protobuf:"bytes,3,opt,name=arrange_card,json=arrangeCard,proto3" json:"arrange_card,omitempty"`
	PresenceCards []*PresenceCards `protobuf:"bytes,4,rep,name=presenceCards,proto3" json:"presenceCards,omitempty"`
}

func (x *UpdateGameState) Reset() {
	*x = UpdateGameState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chinese_poker_game_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGameState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGameState) ProtoMessage() {}

func (x *UpdateGameState) ProtoReflect() protoreflect.Message {
	mi := &file_chinese_poker_game_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGameState.ProtoReflect.Descriptor instead.
func (*UpdateGameState) Descriptor() ([]byte, []int) {
	return file_chinese_poker_game_api_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateGameState) GetState() GameState {
	if x != nil {
		return x.State
	}
	return GameState_GameStateUnknown
}

func (x *UpdateGameState) GetCountDown() int64 {
	if x != nil {
		return x.CountDown
	}
	return 0
}

func (x *UpdateGameState) GetArrangeCard() *ArrangeCard {
	if x != nil {
		return x.ArrangeCard
	}
	return nil
}

func (x *UpdateGameState) GetPresenceCards() []*PresenceCards {
	if x != nil {
		return x.PresenceCards
	}
	return nil
}

type ArrangeCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Presence  string    `protobuf:"bytes,1,opt,name=Presence,proto3" json:"Presence,omitempty"`
	CardEvent CardEvent `protobuf:"varint,2,opt,name=card_event,json=cardEvent,proto3,enum=api.CardEvent" json:"card_event,omitempty"`
}

func (x *ArrangeCard) Reset() {
	*x = ArrangeCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chinese_poker_game_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArrangeCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArrangeCard) ProtoMessage() {}

func (x *ArrangeCard) ProtoReflect() protoreflect.Message {
	mi := &file_chinese_poker_game_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArrangeCard.ProtoReflect.Descriptor instead.
func (*ArrangeCard) Descriptor() ([]byte, []int) {
	return file_chinese_poker_game_api_proto_rawDescGZIP(), []int{8}
}

func (x *ArrangeCard) GetPresence() string {
	if x != nil {
		return x.Presence
	}
	return ""
}

func (x *ArrangeCard) GetCardEvent() CardEvent {
	if x != nil {
		return x.CardEvent
	}
	return CardEvent_COMBINE
}

type UpdateFinish struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ComparisonResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *UpdateFinish) Reset() {
	*x = UpdateFinish{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chinese_poker_game_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFinish) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFinish) ProtoMessage() {}

func (x *UpdateFinish) ProtoReflect() protoreflect.Message {
	mi := &file_chinese_poker_game_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFinish.ProtoReflect.Descriptor instead.
func (*UpdateFinish) Descriptor() ([]byte, []int) {
	return file_chinese_poker_game_api_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateFinish) GetResults() []*ComparisonResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type Bonus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIdCompetitor string `protobuf:"bytes,1,opt,name=user_id_competitor,json=userIdCompetitor,proto3" json:"user_id_competitor,omitempty"`
	BonusFactor      int64  `protobuf:"varint,8,opt,name=bonus_factor,json=bonusFactor,proto3" json:"bonus_factor,omitempty"`
}

func (x *Bonus) Reset() {
	*x = Bonus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chinese_poker_game_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bonus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bonus) ProtoMessage() {}

func (x *Bonus) ProtoReflect() protoreflect.Message {
	mi := &file_chinese_poker_game_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bonus.ProtoReflect.Descriptor instead.
func (*Bonus) Descriptor() ([]byte, []int) {
	return file_chinese_poker_game_api_proto_rawDescGZIP(), []int{10}
}

func (x *Bonus) GetUserIdCompetitor() string {
	if x != nil {
		return x.UserIdCompetitor
	}
	return ""
}

func (x *Bonus) GetBonusFactor() int64 {
	if x != nil {
		return x.BonusFactor
	}
	return 0
}

type ComparisonResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId            string   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	FrontFactor       int64    `protobuf:"varint,2,opt,name=front_factor,json=frontFactor,proto3" json:"front_factor,omitempty"`
	MiddleFactor      int64    `protobuf:"varint,3,opt,name=middle_factor,json=middleFactor,proto3" json:"middle_factor,omitempty"`
	BackFactor        int64    `protobuf:"varint,4,opt,name=back_factor,json=backFactor,proto3" json:"back_factor,omitempty"`
	FrontBonusFactor  int64    `protobuf:"varint,5,opt,name=front_bonus_factor,json=frontBonusFactor,proto3" json:"front_bonus_factor,omitempty"`
	MiddleBonusFactor int64    `protobuf:"varint,6,opt,name=middle_bonus_factor,json=middleBonusFactor,proto3" json:"middle_bonus_factor,omitempty"`
	BackBonusFactor   int64    `protobuf:"varint,7,opt,name=back_bonus_factor,json=backBonusFactor,proto3" json:"back_bonus_factor,omitempty"`
	Bonuses           []*Bonus `protobuf:"bytes,8,rep,name=bonuses,proto3" json:"bonuses,omitempty"`
	ScoopFactor       int64    `protobuf:"varint,9,opt,name=scoop_factor,json=scoopFactor,proto3" json:"scoop_factor,omitempty"`
}

func (x *ComparisonResult) Reset() {
	*x = ComparisonResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chinese_poker_game_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComparisonResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComparisonResult) ProtoMessage() {}

func (x *ComparisonResult) ProtoReflect() protoreflect.Message {
	mi := &file_chinese_poker_game_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComparisonResult.ProtoReflect.Descriptor instead.
func (*ComparisonResult) Descriptor() ([]byte, []int) {
	return file_chinese_poker_game_api_proto_rawDescGZIP(), []int{11}
}

func (x *ComparisonResult) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ComparisonResult) GetFrontFactor() int64 {
	if x != nil {
		return x.FrontFactor
	}
	return 0
}

func (x *ComparisonResult) GetMiddleFactor() int64 {
	if x != nil {
		return x.MiddleFactor
	}
	return 0
}

func (x *ComparisonResult) GetBackFactor() int64 {
	if x != nil {
		return x.BackFactor
	}
	return 0
}

func (x *ComparisonResult) GetFrontBonusFactor() int64 {
	if x != nil {
		return x.FrontBonusFactor
	}
	return 0
}

func (x *ComparisonResult) GetMiddleBonusFactor() int64 {
	if x != nil {
		return x.MiddleBonusFactor
	}
	return 0
}

func (x *ComparisonResult) GetBackBonusFactor() int64 {
	if x != nil {
		return x.BackBonusFactor
	}
	return 0
}

func (x *ComparisonResult) GetBonuses() []*Bonus {
	if x != nil {
		return x.Bonuses
	}
	return nil
}

func (x *ComparisonResult) GetScoopFactor() int64 {
	if x != nil {
		return x.ScoopFactor
	}
	return 0
}

var File_chinese_poker_game_api_proto protoreflect.FileDescriptor

var file_chinese_poker_game_api_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x5f,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03,
	0x61, 0x70, 0x69, 0x22, 0x75, 0x0a, 0x04, 0x43, 0x61, 0x72, 0x64, 0x12, 0x21, 0x0a, 0x04, 0x72,
	0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x43, 0x61, 0x72, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x21,
	0x0a, 0x04, 0x73, 0x75, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x53, 0x75, 0x69, 0x74, 0x52, 0x04, 0x73, 0x75, 0x69,
	0x74, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x2b, 0x0a, 0x08, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x72, 0x64,
	0x52, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x22, 0x09, 0x0a, 0x07, 0x4e, 0x65, 0x77, 0x47, 0x61,
	0x6d, 0x65, 0x22, 0x2f, 0x0a, 0x08, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x12, 0x23,
	0x0a, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x05, 0x63, 0x61,
	0x72, 0x64, 0x73, 0x22, 0x7a, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6a, 0x6f, 0x69, 0x6e,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x65, 0x61, 0x76,
	0x65, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x22,
	0x4c, 0x0a, 0x0d, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x05,
	0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x22, 0x45, 0x0a,
	0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x12, 0x37, 0x0a, 0x0d, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63,
	0x65, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65,
	0x43, 0x61, 0x72, 0x64, 0x22, 0xc5, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x61,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x33, 0x0a,
	0x0c, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x72, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x43, 0x61, 0x72, 0x64, 0x52, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x61,
	0x72, 0x64, 0x12, 0x38, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x0d, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x72, 0x64, 0x73, 0x22, 0x58, 0x0a, 0x0b,
	0x41, 0x72, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x63, 0x61, 0x72,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x3f, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x2f, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x58, 0x0a, 0x05, 0x42, 0x6f, 0x6e, 0x75, 0x73,
	0x12, 0x2c, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x65, 0x74, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x21,
	0x0a, 0x0c, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x22, 0xe7, 0x02, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x5f,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x62, 0x61,
	0x63, 0x6b, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x72, 0x6f, 0x6e,
	0x74, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x42, 0x6f, 0x6e, 0x75, 0x73,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x11, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x42, 0x6f, 0x6e, 0x75, 0x73,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x62,
	0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x24, 0x0a, 0x07, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x52,
	0x07, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x63, 0x6f, 0x6f,
	0x70, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x73, 0x63, 0x6f, 0x6f, 0x70, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2a, 0x30, 0x0a, 0x0a, 0x43,
	0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x01, 0x2a, 0x65, 0x0a,
	0x08, 0x43, 0x61, 0x72, 0x64, 0x53, 0x75, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x55, 0x49,
	0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0e, 0x0a, 0x0a, 0x53, 0x55, 0x49, 0x54, 0x5f, 0x43, 0x4c, 0x55, 0x42, 0x53, 0x10, 0x01, 0x12,
	0x11, 0x0a, 0x0d, 0x53, 0x55, 0x49, 0x54, 0x5f, 0x44, 0x49, 0x41, 0x4d, 0x4f, 0x4e, 0x44, 0x53,
	0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x55, 0x49, 0x54, 0x5f, 0x48, 0x45, 0x41, 0x52, 0x54,
	0x53, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x55, 0x49, 0x54, 0x5f, 0x53, 0x50, 0x41, 0x44,
	0x45, 0x53, 0x10, 0x04, 0x2a, 0xbd, 0x01, 0x0a, 0x08, 0x43, 0x61, 0x72, 0x64, 0x52, 0x61, 0x6e,
	0x6b, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x41, 0x4e, 0x4b, 0x5f,
	0x41, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x32, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x33, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x52,
	0x41, 0x4e, 0x4b, 0x5f, 0x34, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x41, 0x4e, 0x4b, 0x5f,
	0x35, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x36, 0x10, 0x06, 0x12,
	0x0a, 0x0a, 0x06, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x37, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x52,
	0x41, 0x4e, 0x4b, 0x5f, 0x38, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x41, 0x4e, 0x4b, 0x5f,
	0x39, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x31, 0x30, 0x10, 0x0a,
	0x12, 0x0a, 0x0a, 0x06, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x4a, 0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06,
	0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x51, 0x10, 0x0c, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x41, 0x4e, 0x4b,
	0x5f, 0x4b, 0x10, 0x0d, 0x2a, 0x46, 0x0a, 0x0a, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x48, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x48,
	0x4f, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a,
	0x43, 0x48, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x48, 0x49, 0x54, 0x10, 0x02, 0x2a, 0xc6, 0x01, 0x0a,
	0x0d, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x12, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x47, 0x41, 0x4d,
	0x45, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45,
	0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x49, 0x4e, 0x45, 0x5f, 0x43, 0x41, 0x52,
	0x44, 0x53, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x43, 0x41, 0x52, 0x44,
	0x53, 0x10, 0x05, 0x12, 0x20, 0x0a, 0x1c, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x44, 0x45, 0x43, 0x4c, 0x41, 0x52, 0x45, 0x5f, 0x43, 0x41,
	0x52, 0x44, 0x53, 0x10, 0x06, 0x2a, 0xd3, 0x01, 0x0a, 0x0c, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x43, 0x45, 0x10,
	0x01, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x50, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53,
	0x48, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12,
	0x1c, 0x0a, 0x18, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x05, 0x12, 0x1c, 0x0a,
	0x18, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x43,
	0x41, 0x52, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x06, 0x2a, 0xa0, 0x01, 0x0a, 0x09,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12,
	0x11, 0x0a, 0x0d, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x6c, 0x65,
	0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x10,
	0x03, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x6c,
	0x61, 0x79, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x10, 0x06, 0x2a, 0x91,
	0x01, 0x0a, 0x0b, 0x48, 0x61, 0x6e, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x11,
	0x0a, 0x0d, 0x53, 0x74, 0x72, 0x61, 0x69, 0x67, 0x68, 0x74, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x6f, 0x75, 0x72, 0x4f, 0x66, 0x41, 0x4b, 0x69, 0x6e, 0x64,
	0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x75, 0x6c, 0x6c, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x10,
	0x02, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08,
	0x53, 0x74, 0x72, 0x61, 0x69, 0x67, 0x68, 0x74, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x68,
	0x72, 0x65, 0x65, 0x4f, 0x66, 0x41, 0x4b, 0x69, 0x6e, 0x64, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08,
	0x54, 0x77, 0x6f, 0x50, 0x61, 0x69, 0x72, 0x73, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x61,
	0x69, 0x72, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x48, 0x69, 0x67, 0x68, 0x43, 0x61, 0x72, 0x64,
	0x10, 0x08, 0x2a, 0x2f, 0x0a, 0x09, 0x43, 0x61, 0x72, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x4d, 0x42, 0x49, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x53, 0x48, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x43, 0x4c, 0x41, 0x52,
	0x45, 0x10, 0x02, 0x42, 0x37, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x69, 0x61, 0x6f, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x67, 0x61, 0x6d, 0x65, 0x2d,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x63, 0x67, 0x70, 0x2d, 0x62, 0x69, 0x6e,
	0x67, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chinese_poker_game_api_proto_rawDescOnce sync.Once
	file_chinese_poker_game_api_proto_rawDescData = file_chinese_poker_game_api_proto_rawDesc
)

func file_chinese_poker_game_api_proto_rawDescGZIP() []byte {
	file_chinese_poker_game_api_proto_rawDescOnce.Do(func() {
		file_chinese_poker_game_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_chinese_poker_game_api_proto_rawDescData)
	})
	return file_chinese_poker_game_api_proto_rawDescData
}

var file_chinese_poker_game_api_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_chinese_poker_game_api_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_chinese_poker_game_api_proto_goTypes = []interface{}{
	(CardStatus)(0),          // 0: api.CardStatus
	(CardSuit)(0),            // 1: api.CardSuit
	(CardRank)(0),            // 2: api.CardRank
	(ChoiceCode)(0),          // 3: api.ChoiceCode
	(OpCodeRequest)(0),       // 4: api.OpCodeRequest
	(OpCodeUpdate)(0),        // 5: api.OpCodeUpdate
	(GameState)(0),           // 6: api.GameState
	(HandRanking)(0),         // 7: api.HandRanking
	(CardEvent)(0),           // 8: api.CardEvent
	(*Card)(nil),             // 9: api.Card
	(*ListCard)(nil),         // 10: api.ListCard
	(*NewGame)(nil),          // 11: api.NewGame
	(*Organize)(nil),         // 12: api.Organize
	(*UpdatePresence)(nil),   // 13: api.UpdatePresence
	(*PresenceCards)(nil),    // 14: api.PresenceCards
	(*UpdateDeal)(nil),       // 15: api.UpdateDeal
	(*UpdateGameState)(nil),  // 16: api.UpdateGameState
	(*ArrangeCard)(nil),      // 17: api.ArrangeCard
	(*UpdateFinish)(nil),     // 18: api.UpdateFinish
	(*Bonus)(nil),            // 19: api.Bonus
	(*ComparisonResult)(nil), // 20: api.ComparisonResult
}
var file_chinese_poker_game_api_proto_depIdxs = []int32{
	2,  // 0: api.Card.rank:type_name -> api.CardRank
	1,  // 1: api.Card.suit:type_name -> api.CardSuit
	0,  // 2: api.Card.status:type_name -> api.CardStatus
	9,  // 3: api.ListCard.cards:type_name -> api.Card
	10, // 4: api.Organize.cards:type_name -> api.ListCard
	9,  // 5: api.PresenceCards.cards:type_name -> api.Card
	14, // 6: api.UpdateDeal.presence_card:type_name -> api.PresenceCards
	6,  // 7: api.UpdateGameState.state:type_name -> api.GameState
	17, // 8: api.UpdateGameState.arrange_card:type_name -> api.ArrangeCard
	14, // 9: api.UpdateGameState.presenceCards:type_name -> api.PresenceCards
	8,  // 10: api.ArrangeCard.card_event:type_name -> api.CardEvent
	20, // 11: api.UpdateFinish.results:type_name -> api.ComparisonResult
	19, // 12: api.ComparisonResult.bonuses:type_name -> api.Bonus
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_chinese_poker_game_api_proto_init() }
func file_chinese_poker_game_api_proto_init() {
	if File_chinese_poker_game_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chinese_poker_game_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Card); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chinese_poker_game_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chinese_poker_game_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chinese_poker_game_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chinese_poker_game_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePresence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chinese_poker_game_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PresenceCards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chinese_poker_game_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chinese_poker_game_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGameState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chinese_poker_game_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArrangeCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chinese_poker_game_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFinish); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chinese_poker_game_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bonus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chinese_poker_game_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComparisonResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chinese_poker_game_api_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chinese_poker_game_api_proto_goTypes,
		DependencyIndexes: file_chinese_poker_game_api_proto_depIdxs,
		EnumInfos:         file_chinese_poker_game_api_proto_enumTypes,
		MessageInfos:      file_chinese_poker_game_api_proto_msgTypes,
	}.Build()
	File_chinese_poker_game_api_proto = out.File
	file_chinese_poker_game_api_proto_rawDesc = nil
	file_chinese_poker_game_api_proto_goTypes = nil
	file_chinese_poker_game_api_proto_depIdxs = nil
}
