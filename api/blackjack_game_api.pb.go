// Copyright 2020 The Nakama Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.2
// source: blackjack_game_api.proto

// The realtime protocol for the template match engine.

package api

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CardStatus int32

const (
	CardStatus_STATUS_HOLD   CardStatus = 0
	CardStatus_STATUS_UNHOLD CardStatus = 1
)

// Enum value maps for CardStatus.
var (
	CardStatus_name = map[int32]string{
		0: "STATUS_HOLD",
		1: "STATUS_UNHOLD",
	}
	CardStatus_value = map[string]int32{
		"STATUS_HOLD":   0,
		"STATUS_UNHOLD": 1,
	}
)

func (x CardStatus) Enum() *CardStatus {
	p := new(CardStatus)
	*p = x
	return p
}

func (x CardStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_blackjack_game_api_proto_enumTypes[0].Descriptor()
}

func (CardStatus) Type() protoreflect.EnumType {
	return &file_blackjack_game_api_proto_enumTypes[0]
}

func (x CardStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardStatus.Descriptor instead.
func (CardStatus) EnumDescriptor() ([]byte, []int) {
	return file_blackjack_game_api_proto_rawDescGZIP(), []int{0}
}

type CardSuit int32

const (
	CardSuit_SUIT_UNSPECIFIED CardSuit = 0
	CardSuit_SUIT_CLUBS       CardSuit = 1
	CardSuit_SUIT_DIAMONDS    CardSuit = 2
	CardSuit_SUIT_HEARTS      CardSuit = 3
	CardSuit_SUIT_SPADES      CardSuit = 4
)

// Enum value maps for CardSuit.
var (
	CardSuit_name = map[int32]string{
		0: "SUIT_UNSPECIFIED",
		1: "SUIT_CLUBS",
		2: "SUIT_DIAMONDS",
		3: "SUIT_HEARTS",
		4: "SUIT_SPADES",
	}
	CardSuit_value = map[string]int32{
		"SUIT_UNSPECIFIED": 0,
		"SUIT_CLUBS":       1,
		"SUIT_DIAMONDS":    2,
		"SUIT_HEARTS":      3,
		"SUIT_SPADES":      4,
	}
)

func (x CardSuit) Enum() *CardSuit {
	p := new(CardSuit)
	*p = x
	return p
}

func (x CardSuit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardSuit) Descriptor() protoreflect.EnumDescriptor {
	return file_blackjack_game_api_proto_enumTypes[1].Descriptor()
}

func (CardSuit) Type() protoreflect.EnumType {
	return &file_blackjack_game_api_proto_enumTypes[1]
}

func (x CardSuit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardSuit.Descriptor instead.
func (CardSuit) EnumDescriptor() ([]byte, []int) {
	return file_blackjack_game_api_proto_rawDescGZIP(), []int{1}
}

type CardRank int32

const (
	CardRank_RANK_UNSPECIFIED CardRank = 0
	CardRank_RANK_A           CardRank = 1
	CardRank_RANK_2           CardRank = 2
	CardRank_RANK_3           CardRank = 3
	CardRank_RANK_4           CardRank = 4
	CardRank_RANK_5           CardRank = 5
	CardRank_RANK_6           CardRank = 6
	CardRank_RANK_7           CardRank = 7
	CardRank_RANK_8           CardRank = 8
	CardRank_RANK_9           CardRank = 9
	CardRank_RANK_10          CardRank = 10
	CardRank_RANK_J           CardRank = 11
	CardRank_RANK_Q           CardRank = 12
	CardRank_RANK_K           CardRank = 13
)

// Enum value maps for CardRank.
var (
	CardRank_name = map[int32]string{
		0:  "RANK_UNSPECIFIED",
		1:  "RANK_A",
		2:  "RANK_2",
		3:  "RANK_3",
		4:  "RANK_4",
		5:  "RANK_5",
		6:  "RANK_6",
		7:  "RANK_7",
		8:  "RANK_8",
		9:  "RANK_9",
		10: "RANK_10",
		11: "RANK_J",
		12: "RANK_Q",
		13: "RANK_K",
	}
	CardRank_value = map[string]int32{
		"RANK_UNSPECIFIED": 0,
		"RANK_A":           1,
		"RANK_2":           2,
		"RANK_3":           3,
		"RANK_4":           4,
		"RANK_5":           5,
		"RANK_6":           6,
		"RANK_7":           7,
		"RANK_8":           8,
		"RANK_9":           9,
		"RANK_10":          10,
		"RANK_J":           11,
		"RANK_Q":           12,
		"RANK_K":           13,
	}
)

func (x CardRank) Enum() *CardRank {
	p := new(CardRank)
	*p = x
	return p
}

func (x CardRank) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardRank) Descriptor() protoreflect.EnumDescriptor {
	return file_blackjack_game_api_proto_enumTypes[2].Descriptor()
}

func (CardRank) Type() protoreflect.EnumType {
	return &file_blackjack_game_api_proto_enumTypes[2]
}

func (x CardRank) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardRank.Descriptor instead.
func (CardRank) EnumDescriptor() ([]byte, []int) {
	return file_blackjack_game_api_proto_rawDescGZIP(), []int{2}
}

type ChoiceCode int32

const (
	// No choice specified. Unused.
	ChoiceCode_CHOICE_UNSPECIFIED ChoiceCode = 0
	ChoiceCode_CHOICE_STAND       ChoiceCode = 1
	ChoiceCode_CHOICE_HIT         ChoiceCode = 2
)

// Enum value maps for ChoiceCode.
var (
	ChoiceCode_name = map[int32]string{
		0: "CHOICE_UNSPECIFIED",
		1: "CHOICE_STAND",
		2: "CHOICE_HIT",
	}
	ChoiceCode_value = map[string]int32{
		"CHOICE_UNSPECIFIED": 0,
		"CHOICE_STAND":       1,
		"CHOICE_HIT":         2,
	}
)

func (x ChoiceCode) Enum() *ChoiceCode {
	p := new(ChoiceCode)
	*p = x
	return p
}

func (x ChoiceCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChoiceCode) Descriptor() protoreflect.EnumDescriptor {
	return file_blackjack_game_api_proto_enumTypes[3].Descriptor()
}

func (ChoiceCode) Type() protoreflect.EnumType {
	return &file_blackjack_game_api_proto_enumTypes[3]
}

func (x ChoiceCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChoiceCode.Descriptor instead.
func (ChoiceCode) EnumDescriptor() ([]byte, []int) {
	return file_blackjack_game_api_proto_rawDescGZIP(), []int{3}
}

// The complete set of opcodes used for communication between clients and server.
type OpCode int32

const (
	// No opcode specified. Unused.
	OpCode_OPCODE_UNSPECIFIED OpCode = 0
	// New game round starting.
	OpCode_OPCODE_START OpCode = 1
	// Deal code.
	OpCode_OPCODE_DEAL OpCode = 2
	// Deal update code.
	OpCode_OPCODE_DEAL_UPDATE OpCode = 3
	// Update to the state of an ongoing round.
	OpCode_OPCODE_UPDATE OpCode = 4
	// A game round has just completed.
	OpCode_OPCODE_DONE OpCode = 5
	// A choice the player wishes to make and sends to the server.
	OpCode_OPCODE_CHOICE OpCode = 6
	// Notify a user choice to other user.
	OpCode_OPCODE_CHOICE_UPDATE OpCode = 7
	// Move was rejected.
	OpCode_OPCODE_REJECTED OpCode = 8
)

// Enum value maps for OpCode.
var (
	OpCode_name = map[int32]string{
		0: "OPCODE_UNSPECIFIED",
		1: "OPCODE_START",
		2: "OPCODE_DEAL",
		3: "OPCODE_DEAL_UPDATE",
		4: "OPCODE_UPDATE",
		5: "OPCODE_DONE",
		6: "OPCODE_CHOICE",
		7: "OPCODE_CHOICE_UPDATE",
		8: "OPCODE_REJECTED",
	}
	OpCode_value = map[string]int32{
		"OPCODE_UNSPECIFIED":   0,
		"OPCODE_START":         1,
		"OPCODE_DEAL":          2,
		"OPCODE_DEAL_UPDATE":   3,
		"OPCODE_UPDATE":        4,
		"OPCODE_DONE":          5,
		"OPCODE_CHOICE":        6,
		"OPCODE_CHOICE_UPDATE": 7,
		"OPCODE_REJECTED":      8,
	}
)

func (x OpCode) Enum() *OpCode {
	p := new(OpCode)
	*p = x
	return p
}

func (x OpCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpCode) Descriptor() protoreflect.EnumDescriptor {
	return file_blackjack_game_api_proto_enumTypes[4].Descriptor()
}

func (OpCode) Type() protoreflect.EnumType {
	return &file_blackjack_game_api_proto_enumTypes[4]
}

func (x OpCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpCode.Descriptor instead.
func (OpCode) EnumDescriptor() ([]byte, []int) {
	return file_blackjack_game_api_proto_rawDescGZIP(), []int{4}
}

// The card
type Card struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank   CardRank   `protobuf:"varint,1,opt,name=rank,proto3,enum=api.CardRank" json:"rank,omitempty"`
	Suit   CardSuit   `protobuf:"varint,2,opt,name=suit,proto3,enum=api.CardSuit" json:"suit,omitempty"`
	Status CardStatus `protobuf:"varint,3,opt,name=status,proto3,enum=api.CardStatus" json:"status,omitempty"`
}

func (x *Card) Reset() {
	*x = Card{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blackjack_game_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Card) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Card) ProtoMessage() {}

func (x *Card) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_game_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Card.ProtoReflect.Descriptor instead.
func (*Card) Descriptor() ([]byte, []int) {
	return file_blackjack_game_api_proto_rawDescGZIP(), []int{0}
}

func (x *Card) GetRank() CardRank {
	if x != nil {
		return x.Rank
	}
	return CardRank_RANK_UNSPECIFIED
}

func (x *Card) GetSuit() CardSuit {
	if x != nil {
		return x.Suit
	}
	return CardSuit_SUIT_UNSPECIFIED
}

func (x *Card) GetStatus() CardStatus {
	if x != nil {
		return x.Status
	}
	return CardStatus_STATUS_HOLD
}

type ListCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cards []*Card `protobuf:"bytes,1,rep,name=cards,proto3" json:"cards,omitempty"`
}

func (x *ListCard) Reset() {
	*x = ListCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blackjack_game_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCard) ProtoMessage() {}

func (x *ListCard) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_game_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCard.ProtoReflect.Descriptor instead.
func (*ListCard) Descriptor() ([]byte, []int) {
	return file_blackjack_game_api_proto_rawDescGZIP(), []int{1}
}

func (x *ListCard) GetCards() []*Card {
	if x != nil {
		return x.Cards
	}
	return nil
}

// Message data sent by server to clients representing a new game round starting.
type Start struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The dealer.
	Dealer string `protobuf:"bytes,1,opt,name=dealer,proto3" json:"dealer,omitempty"`
}

func (x *Start) Reset() {
	*x = Start{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blackjack_game_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Start) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Start) ProtoMessage() {}

func (x *Start) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_game_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Start.ProtoReflect.Descriptor instead.
func (*Start) Descriptor() ([]byte, []int) {
	return file_blackjack_game_api_proto_rawDescGZIP(), []int{2}
}

func (x *Start) GetDealer() string {
	if x != nil {
		return x.Dealer
	}
	return ""
}

// Message data sent by server to clients representing a new game round starting.
type Deal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The current state of the cards.
	Cards []*Card `protobuf:"bytes,1,rep,name=cards,proto3" json:"cards,omitempty"`
}

func (x *Deal) Reset() {
	*x = Deal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blackjack_game_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deal) ProtoMessage() {}

func (x *Deal) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_game_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deal.ProtoReflect.Descriptor instead.
func (*Deal) Descriptor() ([]byte, []int) {
	return file_blackjack_game_api_proto_rawDescGZIP(), []int{3}
}

func (x *Deal) GetCards() []*Card {
	if x != nil {
		return x.Cards
	}
	return nil
}

type ListPresence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Presences []string `protobuf:"bytes,1,rep,name=presences,proto3" json:"presences,omitempty"`
}

func (x *ListPresence) Reset() {
	*x = ListPresence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blackjack_game_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPresence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPresence) ProtoMessage() {}

func (x *ListPresence) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_game_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPresence.ProtoReflect.Descriptor instead.
func (*ListPresence) Descriptor() ([]byte, []int) {
	return file_blackjack_game_api_proto_rawDescGZIP(), []int{4}
}

func (x *ListPresence) GetPresences() []string {
	if x != nil {
		return x.Presences
	}
	return nil
}

// A game state update sent by the server to clients.
type Update struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whose turn it is to play.
	Turn string `protobuf:"bytes,1,opt,name=turn,proto3" json:"turn,omitempty"`
	// Whose turn it is to play.
	Presences *ListPresence `protobuf:"bytes,2,opt,name=presences,proto3" json:"presences,omitempty"`
	// The card was hold by user
	UserCards map[string]*ListCard `protobuf:"bytes,3,rep,name=user_cards,json=userCards,proto3" json:"user_cards,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The deadline time by which the player must submit their choice, or forfeit.
	Deadline int64 `protobuf:"varint,4,opt,name=deadline,proto3" json:"deadline,omitempty"`
}

func (x *Update) Reset() {
	*x = Update{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blackjack_game_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Update) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Update) ProtoMessage() {}

func (x *Update) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_game_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Update.ProtoReflect.Descriptor instead.
func (*Update) Descriptor() ([]byte, []int) {
	return file_blackjack_game_api_proto_rawDescGZIP(), []int{5}
}

func (x *Update) GetTurn() string {
	if x != nil {
		return x.Turn
	}
	return ""
}

func (x *Update) GetPresences() *ListPresence {
	if x != nil {
		return x.Presences
	}
	return nil
}

func (x *Update) GetUserCards() map[string]*ListCard {
	if x != nil {
		return x.UserCards
	}
	return nil
}

func (x *Update) GetDeadline() int64 {
	if x != nil {
		return x.Deadline
	}
	return 0
}

// Complete game round with winner announcement.
type Done struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The final state of the board.
	UserCards map[string]*ListCard `protobuf:"bytes,1,rep,name=user_cards,json=userCards,proto3" json:"user_cards,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The winner of the game, if any. Unspecified if it's a draw.
	Winner []string `protobuf:"bytes,2,rep,name=winner,proto3" json:"winner,omitempty"`
	// Next round start time.
	NextGameStart int64 `protobuf:"varint,4,opt,name=next_game_start,json=nextGameStart,proto3" json:"next_game_start,omitempty"`
}

func (x *Done) Reset() {
	*x = Done{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blackjack_game_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Done) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Done) ProtoMessage() {}

func (x *Done) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_game_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Done.ProtoReflect.Descriptor instead.
func (*Done) Descriptor() ([]byte, []int) {
	return file_blackjack_game_api_proto_rawDescGZIP(), []int{6}
}

func (x *Done) GetUserCards() map[string]*ListCard {
	if x != nil {
		return x.UserCards
	}
	return nil
}

func (x *Done) GetWinner() []string {
	if x != nil {
		return x.Winner
	}
	return nil
}

func (x *Done) GetNextGameStart() int64 {
	if x != nil {
		return x.NextGameStart
	}
	return 0
}

// A player intends to make a move.
type Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Option ChoiceCode `protobuf:"varint,1,opt,name=option,proto3,enum=api.ChoiceCode" json:"option,omitempty"`
}

func (x *Choice) Reset() {
	*x = Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blackjack_game_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Choice) ProtoMessage() {}

func (x *Choice) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_game_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Choice.ProtoReflect.Descriptor instead.
func (*Choice) Descriptor() ([]byte, []int) {
	return file_blackjack_game_api_proto_rawDescGZIP(), []int{7}
}

func (x *Choice) GetOption() ChoiceCode {
	if x != nil {
		return x.Option
	}
	return ChoiceCode_CHOICE_UNSPECIFIED
}

// A player intends to make a move.
type ChoiceResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Card *Card `protobuf:"bytes,1,opt,name=card,proto3" json:"card,omitempty"`
}

func (x *ChoiceResult) Reset() {
	*x = ChoiceResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blackjack_game_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChoiceResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChoiceResult) ProtoMessage() {}

func (x *ChoiceResult) ProtoReflect() protoreflect.Message {
	mi := &file_blackjack_game_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChoiceResult.ProtoReflect.Descriptor instead.
func (*ChoiceResult) Descriptor() ([]byte, []int) {
	return file_blackjack_game_api_proto_rawDescGZIP(), []int{8}
}

func (x *ChoiceResult) GetCard() *Card {
	if x != nil {
		return x.Card
	}
	return nil
}

var File_blackjack_game_api_proto protoreflect.FileDescriptor

var file_blackjack_game_api_proto_rawDesc = []byte{
	0x0a, 0x18, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6a, 0x61, 0x63, 0x6b, 0x5f, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x61, 0x70, 0x69, 0x22,
	0x75, 0x0a, 0x04, 0x43, 0x61, 0x72, 0x64, 0x12, 0x21, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x72, 0x64,
	0x52, 0x61, 0x6e, 0x6b, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x21, 0x0a, 0x04, 0x73, 0x75,
	0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43,
	0x61, 0x72, 0x64, 0x53, 0x75, 0x69, 0x74, 0x52, 0x04, 0x73, 0x75, 0x69, 0x74, 0x12, 0x27, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x2b, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61,
	0x72, 0x64, 0x12, 0x1f, 0x0a, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x05, 0x63, 0x61,
	0x72, 0x64, 0x73, 0x22, 0x1f, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65,
	0x61, 0x6c, 0x65, 0x72, 0x22, 0x27, 0x0a, 0x04, 0x44, 0x65, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x05,
	0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x22, 0x2c, 0x0a,
	0x0c, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x22, 0xf1, 0x01, 0x0a, 0x06,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x2f, 0x0a, 0x09, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x09, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x61, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x1a, 0x4b, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x61, 0x72, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xcc, 0x01, 0x0a, 0x04, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x44, 0x6f, 0x6e, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x1a, 0x4b, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x61, 0x72, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x31,
	0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x2d, 0x0a, 0x0c, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x1d, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64,
	0x2a, 0x30, 0x0a, 0x0a, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0f,
	0x0a, 0x0b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x00, 0x12,
	0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x48, 0x4f, 0x4c, 0x44,
	0x10, 0x01, 0x2a, 0x65, 0x0a, 0x08, 0x43, 0x61, 0x72, 0x64, 0x53, 0x75, 0x69, 0x74, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x55, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x55, 0x49, 0x54, 0x5f, 0x43, 0x4c, 0x55,
	0x42, 0x53, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x55, 0x49, 0x54, 0x5f, 0x44, 0x49, 0x41,
	0x4d, 0x4f, 0x4e, 0x44, 0x53, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x55, 0x49, 0x54, 0x5f,
	0x48, 0x45, 0x41, 0x52, 0x54, 0x53, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x55, 0x49, 0x54,
	0x5f, 0x53, 0x50, 0x41, 0x44, 0x45, 0x53, 0x10, 0x04, 0x2a, 0xbd, 0x01, 0x0a, 0x08, 0x43, 0x61,
	0x72, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x41, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x41, 0x4e, 0x4b,
	0x5f, 0x32, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x33, 0x10, 0x03,
	0x12, 0x0a, 0x0a, 0x06, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x34, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06,
	0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x35, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x41, 0x4e, 0x4b,
	0x5f, 0x36, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x37, 0x10, 0x07,
	0x12, 0x0a, 0x0a, 0x06, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x38, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06,
	0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x39, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x41, 0x4e, 0x4b,
	0x5f, 0x31, 0x30, 0x10, 0x0a, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x4a, 0x10,
	0x0b, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x51, 0x10, 0x0c, 0x12, 0x0a, 0x0a,
	0x06, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x4b, 0x10, 0x0d, 0x2a, 0x46, 0x0a, 0x0a, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x48, 0x4f, 0x49, 0x43,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x10, 0x0a, 0x0c, 0x43, 0x48, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x10,
	0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x48, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x48, 0x49, 0x54, 0x10,
	0x02, 0x2a, 0xc1, 0x01, 0x0a, 0x06, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x12,
	0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x52, 0x54, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x44, 0x45, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x50, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12,
	0x11, 0x0a, 0x0d, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x4f, 0x4e,
	0x45, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x48,
	0x4f, 0x49, 0x43, 0x45, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x43, 0x48, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x07,
	0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x10, 0x08, 0x42, 0x37, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x69, 0x61, 0x6f, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x67, 0x61, 0x6d,
	0x65, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x63, 0x67, 0x70, 0x2d, 0x62,
	0x69, 0x6e, 0x67, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_blackjack_game_api_proto_rawDescOnce sync.Once
	file_blackjack_game_api_proto_rawDescData = file_blackjack_game_api_proto_rawDesc
)

func file_blackjack_game_api_proto_rawDescGZIP() []byte {
	file_blackjack_game_api_proto_rawDescOnce.Do(func() {
		file_blackjack_game_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_blackjack_game_api_proto_rawDescData)
	})
	return file_blackjack_game_api_proto_rawDescData
}

var file_blackjack_game_api_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_blackjack_game_api_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_blackjack_game_api_proto_goTypes = []interface{}{
	(CardStatus)(0),      // 0: api.CardStatus
	(CardSuit)(0),        // 1: api.CardSuit
	(CardRank)(0),        // 2: api.CardRank
	(ChoiceCode)(0),      // 3: api.ChoiceCode
	(OpCode)(0),          // 4: api.OpCode
	(*Card)(nil),         // 5: api.Card
	(*ListCard)(nil),     // 6: api.ListCard
	(*Start)(nil),        // 7: api.Start
	(*Deal)(nil),         // 8: api.Deal
	(*ListPresence)(nil), // 9: api.ListPresence
	(*Update)(nil),       // 10: api.Update
	(*Done)(nil),         // 11: api.Done
	(*Choice)(nil),       // 12: api.Choice
	(*ChoiceResult)(nil), // 13: api.ChoiceResult
	nil,                  // 14: api.Update.UserCardsEntry
	nil,                  // 15: api.Done.UserCardsEntry
}
var file_blackjack_game_api_proto_depIdxs = []int32{
	2,  // 0: api.Card.rank:type_name -> api.CardRank
	1,  // 1: api.Card.suit:type_name -> api.CardSuit
	0,  // 2: api.Card.status:type_name -> api.CardStatus
	5,  // 3: api.ListCard.cards:type_name -> api.Card
	5,  // 4: api.Deal.cards:type_name -> api.Card
	9,  // 5: api.Update.presences:type_name -> api.ListPresence
	14, // 6: api.Update.user_cards:type_name -> api.Update.UserCardsEntry
	15, // 7: api.Done.user_cards:type_name -> api.Done.UserCardsEntry
	3,  // 8: api.Choice.option:type_name -> api.ChoiceCode
	5,  // 9: api.ChoiceResult.card:type_name -> api.Card
	6,  // 10: api.Update.UserCardsEntry.value:type_name -> api.ListCard
	6,  // 11: api.Done.UserCardsEntry.value:type_name -> api.ListCard
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_blackjack_game_api_proto_init() }
func file_blackjack_game_api_proto_init() {
	if File_blackjack_game_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_blackjack_game_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Card); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blackjack_game_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blackjack_game_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Start); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blackjack_game_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blackjack_game_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPresence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blackjack_game_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Update); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blackjack_game_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Done); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blackjack_game_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blackjack_game_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChoiceResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_blackjack_game_api_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_blackjack_game_api_proto_goTypes,
		DependencyIndexes: file_blackjack_game_api_proto_depIdxs,
		EnumInfos:         file_blackjack_game_api_proto_enumTypes,
		MessageInfos:      file_blackjack_game_api_proto_msgTypes,
	}.Build()
	File_blackjack_game_api_proto = out.File
	file_blackjack_game_api_proto_rawDesc = nil
	file_blackjack_game_api_proto_goTypes = nil
	file_blackjack_game_api_proto_depIdxs = nil
}
