// Copyright 2020 The Nakama Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

// The realtime protocol for the template match engine.
package api;

option go_package = "github.com/ciaolink-game-platform/cgp-bing-module/api";

enum CardStatus {
    STATUS_HOLD = 0;
    STATUS_UNHOLD = 1;
}

enum CardSuit {
    SUIT_UNSPECIFIED = 0;
    SUIT_CLUBS = 1;
    SUIT_DIAMONDS = 2;
    SUIT_HEARTS = 3;
    SUIT_SPADES = 4;
}

enum CardRank {
    RANK_UNSPECIFIED = 0;
    RANK_A = 1;
    RANK_2 = 2;
    RANK_3 = 3;
    RANK_4 = 4;
    RANK_5 = 5;
    RANK_6 = 6;
    RANK_7 = 7;
    RANK_8 = 8;
    RANK_9 = 9;
    RANK_10 = 10;
    RANK_J = 11;
    RANK_Q = 12;
    RANK_K = 13;
}

// The card
message Card {
    CardRank rank = 1;
    CardSuit suit = 2;
    CardStatus status = 3;
}

message ListCard {
    repeated Card cards = 1;
}

enum ChoiceCode {
    // No choice specified. Unused.
    CHOICE_UNSPECIFIED = 0;
    CHOICE_STAND = 1;
    CHOICE_HIT = 2;
}

// The complete set of opcodes used for communication between clients and server.
enum OpCode {
    // No opcode specified. Unused.
    OPCODE_UNSPECIFIED = 0;
    // New game round starting.
    OPCODE_START = 1;
    // Deal code.
    OPCODE_DEAL = 2;
    // Deal update code.
    OPCODE_DEAL_UPDATE = 3;
    // Update to the state of an ongoing round.
    OPCODE_UPDATE = 4;
    // A game round has just completed.
    OPCODE_DONE = 5;
    // A choice the player wishes to make and sends to the server.
    OPCODE_CHOICE = 6;
    // Notify a user choice to other user.
    OPCODE_CHOICE_UPDATE = 7;
    // Move was rejected.
    OPCODE_REJECTED = 8;
}

// Message data sent by server to clients representing a new game round starting.
message Start {
    // The dealer.
    string dealer = 1;
}

// Message data sent by server to clients representing a new game round starting.
message Deal {
    // The current state of the cards.
    repeated Card cards = 1;
}

message PresenceInfo {
    string user_id = 1;
    ListCard cards = 2;
}

message ListPresenceInfos {
    repeated string PresenceInfo = 1;
}

// A game state update sent by the server to clients.
message Update {
    // Whose turn it is to play.
    bool playing = 1;
    // Whose turn it is to play.
    string turn = 2;
    // Whose turn it is to play.
    ListPresenceInfos presence_infos = 3;
    // The deadline time by which the player must submit their choice, or forfeit.
    int64 deadline = 4;
}

// Complete game round with winner announcement.
message Done {
    // The final state of the board.
    map<string, ListCard> user_cards = 1;
    // The winner of the game, if any. Unspecified if it's a draw.
    repeated string winner = 2;
    // Next round start time.
    int64 next_game_start = 4;
}

// A player intends to make a move.
message Choice {
    ChoiceCode option = 1;
}

// A player intends to make a move.
message ChoiceResult {
    Card card = 1;
}
